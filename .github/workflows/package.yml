name: Package

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-tgz:
    permissions:
      contents: read
    runs-on: macos-latest
    env:
      SCCACHE_GHA_ENABLED: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-test-environment

      - name: Configure CMake
        run: cmake --preset default

      - name: Build libpapilo
        run: cmake --build --preset default --target libpapilo

      - name: Build papilo executable
        run: cmake --build --preset default --target papilo-executable

      - name: Create TGZ package
        run: cpack --preset tgz

      - name: Upload TGZ package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: libpapilo-tgz-macOS
          path: build/packages/*.tar.gz
          retention-days: 30

  build-deb:
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    env:
      SCCACHE_GHA_ENABLED: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-test-environment

      - name: Configure CMake
        run: cmake --preset default

      - name: Build libpapilo
        run: cmake --build --preset default --target libpapilo

      - name: Build papilo executable
        run: cmake --build --preset default --target papilo-executable

      - name: Create DEB package
        run: |
          sudo apt update
          # Install library packages explicitly for CPACK_DEBIAN_PACKAGE_SHLIBDEPS
          sudo apt install -y libtbb-dev libboost-dev libboost-iostreams-dev libboost-program-options-dev libboost-serialization-dev
          cpack --preset deb

      - name: Upload DEB package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: libpapilo-deb
          path: build/packages/*.deb
          retention-days: 30

  build-rpm:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_34_x86_64
    env:
      SCCACHE_GHA_ENABLED: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fix git ownership
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Setup sccache with GitHub Actions cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install system dependencies
        run: dnf install -y cmake ninja-build rpm-build tbb-devel boost-devel bzip2-devel xz-devel libzstd-devel zlib-devel

      - name: Configure CMake
        run: cmake --preset default

      - name: Build libpapilo
        run: cmake --build --preset default --target libpapilo

      - name: Build papilo executable
        run: cmake --build --preset default --target papilo-executable

      - name: Create RPM package
        run: cpack --preset rpm

      - name: Upload RPM package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: libpapilo-rpm
          path: build/packages/*.rpm
          retention-days: 30

  test-deb:
    needs: build-deb
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ["24.04", "22.04"]
    container: ubuntu:${{ matrix.version }}
    permissions:
      contents: read

    steps:
      - name: Download DEB package
        uses: actions/download-artifact@v4
        with:
          name: libpapilo-deb
          path: .

      - name: Test apt install of DEB package
        run: |
          apt update
          apt install -y ./*.deb

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build tools for testing
        run: apt install -y gcc pkg-config

      - name: Verify pkg-config installation
        run: |
          pkg-config --version
          pkg-config --list-all | grep libpapilo
          pkg-config --modversion libpapilo
          echo "CFLAGS: $(pkg-config --cflags libpapilo)"
          echo "LIBS: $(pkg-config --libs libpapilo)"

      - name: Run tests using pkg-config
        run: |
          gcc test/libpapilo/LinkTest.c $(pkg-config --cflags --libs libpapilo) -o linktest
          ./linktest

      - name: Verify papilo executable
        run: papilo -h

  test-rpm:
    needs: build-rpm
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_34_x86_64
    permissions:
      contents: read

    steps:
      - name: Download RPM package
        uses: actions/download-artifact@v4
        with:
          name: libpapilo-rpm
          path: .

      - name: Test dnf install of RPM package
        run: dnf install -y ./*.rpm

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build tools for testing
        run: dnf install -y gcc pkgconfig

      - name: Verify pkg-config installation
        run: |
          pkg-config --version
          pkg-config --list-all | grep libpapilo
          pkg-config --modversion libpapilo
          echo "CFLAGS: $(pkg-config --cflags libpapilo)"
          echo "LIBS: $(pkg-config --libs libpapilo)"

      - name: Run tests using pkg-config
        run: |
          gcc test/libpapilo/LinkTest.c $(pkg-config --cflags --libs libpapilo) -o linktest
          ./linktest

      - name: Verify papilo executable
        run: papilo -h

  publish:
    permissions:
      contents: write
    if: github.event_name == 'release'
    needs: [build-tgz, build-deb, build-rpm, test-deb, test-rpm]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages

      - name: Add packages to GitHub Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          files: |
            packages/**/*.tar.gz
            packages/**/*.deb
            packages/**/*.rpm
          tag_name: ${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  next_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: [publish]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Bump up jij patch version
        run: |
          ./scripts/increment_jij_patch_version.sh
          NEW_VERSION=$(cmake --preset default 2>&1 | grep "libpapilo version:" | sed 's/.*libpapilo version: //')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          title: "Start developing ${{ env.NEW_VERSION }}"
          branch: "version-update/${{ env.NEW_VERSION }}"
          base: "main"
